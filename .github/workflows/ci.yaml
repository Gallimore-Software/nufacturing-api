name: CI

on:
  push:
    branches:
      - development
      - testing
      - staging
      - production
      - 'story/*'
  pull_request:
    branches:
      - development
      - testing
      - staging
      - production

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Cache dependencies
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Lint the code
      - name: Run linting
        run: npm run lint

      # Run Prettier check
      - name: Run Prettier
        run: npm run format

      # Run Jest tests with coverage
      - name: Run unit tests with coverage
        run: npm test -- --coverage

      - name: Ensure coverage is at least 80%
        run: |
          npx nyc check-coverage --lines 80 --functions 80 --branches 80 --statements 80

      # Run integration tests
      - name: Run integration tests
        run: npm run test:integration

      # Run end-to-end Cypress tests
      - name: Run Cypress tests
        run: npm run e2e

      # Upload test coverage report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  pact:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Run Pact tests
        run: npm run pact

  deploy:
    runs-on: ubuntu-latest
    needs: [build, pact]
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel --prod --token $VERCEL_TOKEN --confirm --cwd ./
