#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

# test "" = "$(grep '^Signed-off-by: ' "$1" |
# 	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
# 	echo >&2 Duplicate Signed-off-by lines.
# 	exit 1
# }

#!/bin/sh

# Commit message file passed by Git
commit_msg_file="$1"
# Read the commit message
commit_msg=$(cat "$commit_msg_file")

# Define a regex pattern for the issue ID (adjust this pattern to match your issue IDs)
issue_id_pattern="ABC-[0-9]+"

# Check if the commit message matches the issue ID pattern
if ! echo "$commit_msg" | grep -qE "$issue_id_pattern"; then
  echo "Error: Commit message must contain a valid issue ID (e.g., ABC-123)."
  exit 1
fi

# Optionally, you can also enforce a specific format for the commit message
if ! echo "$commit_msg" | grep -qE "^($issue_id_pattern).+"; then
  echo "Error: Commit message must start with a valid issue ID (e.g., ABC-123: Your message here)."
  exit 1
fi
